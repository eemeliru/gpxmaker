#!/usr/bin/python3

__author__ = "Eemeli Ruohio"
__version__ = "0.2"

import pathlib
from pathlib import Path
import argparse
from datetime import datetime
from pprint import pprint
import gpxpy
import yaml

def load_template(path: str):
    with open(path, 'r') as yaml_file:
        conf = yaml.safe_load(yaml_file)
    return conf

def load_templates():
    conf = {}
    for p in pathlib.Path('./templates').iterdir():
        if p.suffix == '.yaml' or p.suffix == '.yml':
            new = load_template(p)
            conf = {**conf, **new}
    return conf

TEMPLATES = load_templates()

def parse_args():
    parser = argparse.ArgumentParser(description="Tool for combining and filtering .gpx files.")
    parser.add_argument('--filename', '-fn', type=str, 
        help="Name of the input .gpx file. Defaults to None & uses only path to find files.")
    parser.add_argument('--path', '-p', type=str, default='./samples', 
        help="Path to gpx file(s). Defaults to ./samples")
    parser.add_argument('--include-samples', '-i', dest='include', action='store_true', default=False, 
        help="If custom path is provided, use also files from the ./samples -folder.")
    parser.add_argument('--name', '-n', type=str, default='new', 
        help="Name of the created/edited template/waypoint or output .gpx file." 
        "Defaults to 'new' OR chosen template name.")
    parser.add_argument('--coordinates', '-c', nargs='+', 
        help="Coordinates for waypoints. "
        "Give in format North South West East or Latitude Longitude, if saving waypoint.")
    parser.add_argument('--template', '-t', choices=TEMPLATES.keys(), 
        help="Choose coordinates from already defined templates.")
    parser.add_argument('--add', '-s', choices=['template', 'waypoint'], 
        help="Save coordinates as new template or waypoint. Uses name -param as template/waypoint name.")
    parser.add_argument('--edit', '-e', choices=['template', 'waypoint'], 
        help="Edit existing template or waypoint." 
        "Uses search -param to find existing template/waypoint."
        "Uses name, coordinates, description -params to edit template/waypoint"
        "If param not given, uses existing values.")
    parser.add_argument('--description', '-d', type=str, 
        help="Description for new/existing waypoint. Optional.")
    parser.add_argument('--just-print', dest='printer', action='store_true', default=False, 
        help="Don't save .gpx, just print result to stdout/console.")
    parser.add_argument('--search', '-S', type=str, 
        help="Search if waypoint is in .gpx -folder.")
    parser.add_argument('--verbose', '-v', action='store_true', default=False, 
        help="Verbose output.")
    args = parser.parse_args()
    return args

def read_gpx(fullpath: str, gpx: gpxpy.gpx.GPX=None):
    """Read a gpx file and concats it's content to the given gpx."""
    if gpx is None:
        gpx = gpxpy.gpx.GPX()

    with open(fullpath) as gpx_file:
        old_gpx = gpxpy.parse(gpx_file)
    for waypoint in old_gpx.waypoints:
        gpx.waypoints.append(waypoint)
    return gpx

def read_gpxes(path: str, filename: str) -> gpxpy.gpx.GPX:
    """Handles reading & concatenating of all gpx files from the given path."""
    if filename is not None:
        gpx = read_gpx(f'{path}/{filename}.gpx')
    else:
        gpx = gpxpy.gpx.GPX()
        for p in pathlib.Path(path).iterdir():
            if p.suffix == '.gpx':
                gpx = read_gpx(p, gpx)
    return gpx

def search_gpx(gpx: gpxpy.gpx.GPX, searched: str):
    """Simple waypoint search from gpx."""
    results = {}
    for waypoint in gpx.waypoints:
        if searched.lower() in waypoint.name.lower():
            results[waypoint.name] = {
                'latitude': waypoint.latitude, 
                'longitude': waypoint.longitude, 
                'updated': datetime.strftime(waypoint.time, '%Y-%m-%d %H:%M:%S'),
                'description': waypoint.description, 
                'comment': waypoint.comment
            }
    if len(results) > 0:
        print("Found one or more likely matches:")
        pprint(results)
    else:
        print("No matches found.")

def edit_waypoint(gpx: gpxpy.gpx.GPX, options: dict):
    """Simple waypoint edit from gpx."""
    for waypoint in gpx.waypoints:
        if options['searched'].lower() == waypoint.name.lower():
            try:
                waypoint.name = options['name']
            except KeyError:
                pass
            try:
                waypoint.latitude = options['latitude']
            except KeyError:
                pass
            try:
                waypoint.longitude = options['longitude']
            except KeyError:
                pass
            try: 
                waypoint.description = options['description']
                waypoint.comment =  options['description']
            except KeyError:
                pass
            waypoint.time = datetime.now()
            if verbose:
                print(f"Edited waypoint {options['searched']} with params {waypoint}")
    return gpx

def filter_coordinates(gpx: gpxpy.gpx.GPX, coordinates: dict):
    """Selects waypoints inside of given coordinates."""
    filtered = gpxpy.gpx.GPX()
    for waypoint in gpx.waypoints:
        if (waypoint.latitude <= coordinates['N'] and 
            waypoint.latitude >= coordinates['S'] and 
            waypoint.longitude >= coordinates['W'] and 
            waypoint.longitude <= coordinates['E']):
            filtered.waypoints.append(waypoint)
    if verbose:
        print(f"Filtered from {len(gpx.waypoints)} waypoints to {len(filtered.waypoints)} waypoints!")

    return filtered

def edit_waypoint(gpx: gpxpy.gpx.GPX, data: dict):
    for waypoint in gpx.waypoints:
        if data['search'].lower() == waypoint.name.lower():
            try:
                waypoint.name = data['name']
            except KeyError:
                pass
            try:
                waypoint.latitude = data['latitude']
            except KeyError:
                pass
            try:
                waypoint.longitude = data['longitude']
            except KeyError:
                pass
            try:
                waypoint.description = data['description']
                waypoint.comment = data['description']
            except KeyError:
                pass
            waypoint.time = data['time']

            print(f"Waypoint {data['search']} edited with params {data}")
    return gpx

def save_template(coordinates: dict, filename: str):
    with open(f'./templates/{filename}.yml', 'w+') as yaml_file:
        yaml.dump(coordinates, yaml_file)
    print(f"Template {filename}.yml saved!")

def save_gpx(gpx: gpxpy.gpx.GPX, output: str, printer: bool, path: str = 'results', overwrite: bool = False):
    """Save gpx to a single file. Or if param --just-print is given, prints the gpx."""
    if printer:
        print('Just printing the output...\n')
        print(gpx.to_xml())
    else:
        #if file already exists, read the file and add our gpx to it
        if Path(f'{path}/{output}.gpx').exists():
            if not overwrite:
                gpx = read_gpx(f'{path}/{output}.gpx', gpx)

        with open(f'{path}/{output}.gpx', 'w+') as gpx_file:
            gpx_file.write(gpx.to_xml())

        print(f'Success, saved as {output}.gpx!')

def save_waypoint(data: dict, gpx: gpxpy.gpx.GPX=None):
    if gpx is None:
        gpx = gpxpy.gpx.GPX()

    gpx.waypoints.append(
        gpxpy.gpx.GPXWaypoint(
            latitude=data['latitude'], 
            longitude=data['longitude'], 
            time=data['time'], 
            name=data['name'], 
            description=data['description'],
            comment=data['description']
        )
    )
    return gpx

def main():
    args = parse_args()
    # make verbose global
    global verbose 
    verbose = args.verbose
    # print arguments if verbose
    if verbose:
        pprint(f"Arguments: {args}")

    # rest of params
    filename = args.filename
    path = args.path
    name = args.name
    if name == 'new':
        waypoint_name = None
    else:
        waypoint_name = name
    search = args.search
    printer = args.printer
    description = args.description
    coordinates = False
    # params to waypoint_data -dict
    waypoint_data = {
        'search': search,
        'name': waypoint_name,
        'time': datetime.now(), 
        'description': description,
        'comment': description
    }
    # remove nulls from dict
    waypoint_data = {k:v for k,v in waypoint_data.items() if v is not None}

    if args.coordinates is not None:
        # if we add/edit waypoint, assume coordinates are [Latitude, Longitude]
        try:
            waypoint_data['latitude'] = args.coordinates[0]
            waypoint_data['longitude'] = args.coordinates[1]
        except IndexError:
            raise SystemExit("Error while parsing coordinates, are you sure you gave right coordinates?")

        if args.add == 'waypoint':
            # append waypoint_data to gpx
            gpx = save_waypoint(waypoint_data)
            save_gpx(gpx, filename, printer)
            raise SystemExit('Waypoint added successfully.')
        else:
            # assume that the coordinates are [North, South, West, East]
            try:
                coordinates = {
                    'N': float(args.coordinates[0]),
                    'S': float(args.coordinates[1]),
                    'W': float(args.coordinates[2]),
                    'E': float(args.coordinates[3])
                }
            # catch some errors found while testing
            except IndexError:
                raise SystemExit("Error while parsing coordinates, are you sure you gave right coordinates?")
            except ValueError:
                raise SystemExit("Error while parsing coordinates, only use numbers in coordinates.")
        # save as a new template
        if args.add == 'template':
            template = {name: coordinates}
            save_template(template, name)
            raise SystemExit(f'Template {name} added successfully.')
    
    # check illegal uses of --add
    if args.add is not None:
        raise SystemExit('Remember coordinates when using --add!')

    # get coordinates from the template
    if args.template is not None:
        if name == 'new':
            name = args.template
        coordinates = TEMPLATES[args.template]
        if verbose:
            print(f'Template {args.template} selected!')

    # read the .gpx files from given path -folder
    gpx = read_gpxes(path, filename)

    # edit waypoint/template
    if args.edit is not None:
        if args.edit == 'waypoint':
            gpx = edit_waypoint(gpx, waypoint_data)
            save_gpx(gpx, filename, printer, overwrite=True)
        # elif args.edit == 'template':
        #     template = load_template(f'templates/{search}')
        #     save_template(template, name)
        raise SystemExit('Waypoint added successfully.')

    # if user wants to include files in /samples -folder
    if args.include:
        samples = read_gpxes(path='/samples')
        for waypoint in samples.waypoints:
            gpx.waypoints.append(waypoint)

    if search is not None:
        search_gpx(gpx, search)
        raise SystemExit()

    # if user has given coordinates or template, filter results
    # else just move on to save/print results
    if coordinates:
        if verbose:
            print(f'Coordinates given, filtering results!')
            print(f'Using coordinates: {coordinates}')
        gpx = filter_coordinates(gpx, coordinates)

    # save or print the results
    save_gpx(gpx, name, printer)

if __name__ == '__main__':
    main()